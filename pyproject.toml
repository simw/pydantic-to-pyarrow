[project]
name = "pydantic-to-pyarrow"
dynamic = ["version"]
description = "Conversion from pydantic models to pyarrow schemas"
authors = [
    {name = "Simon Wicks", email = "simw@users.noreply.github.com"}
]
readme = "README.md"
repository = ""
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Operating System :: OS Independent",
    "Environment :: Console",
    "Environment :: MacOS X",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
requires-python = ">=3.8"
dependencies = [
    "pydantic>=2.0",
    "pydantic>=2.8; python_version>='3.13'",
    "pyarrow>=11.0",
    "pyarrow>=18.0; python_version>='3.13'",
    "numpy<1.25; python_version<'3.9'",
    "numpy>1.25; python_version>='3.12'",
    "typing-extensions>=4.6.1",
]

[dependency-groups]
lint = [
    "black>=24.8.0",
    "mypy>=1.13.0",
    "ruff>=0.7.3",
]
test = [
    "coverage>=7.6.1",
    "packaging>=24.2",
    "pytest>=8.3.3",
]

[project.urls]
Homepage = "https://github.com/simw/pydantic-to-pyarrow"
Repository = "https://github.com/simw/pydantic-to-pyarrow"
Issues = "https://github.com/simw/pydantic-to-pyarrow/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"


[tool.hatch.version]
path = "src/pydantic_to_pyarrow/__init__.py"


[tool.uv]
default-groups = ["lint", "test"]


[tool.mypy]
strict = true


[tool.black]
color = true
line-length = 88
target-version = ["py38"]


[tool.ruff]
line-length = 88
indent-width = 4
target-version = "py38"

[tool.ruff.lint]
select = [
    "F",  # pyflakes
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "C90",  # Mccabe complexity
    "I",  # isort
    "N",  # pep8-naming
    "UP",  # pyupgrade
    "YTT",  # flake8-2020
    "ANN",  # flake8-annotations
    "ASYNC",  # flake8-ASYNC
    "S",  # flake8-bandit
    "BLE",  # flake8-blind-except
    "B",  # flake8-bugbear
    "A",  # flake8-builtins
    "C4",  # flake8-comprehensions
    "PT",  # flake8-pyteststyle
    "PD",  # pandas-vet
    "PL",  # pylint
    "PERF",  # perflint
]
ignore = []

[tool.ruff.lint.per-file-ignores]
"tests/**/**" = ["S"]  # Don't run bandit on tests (eg flagging on assert)

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["pydantic_to_pyarrow"]


[tool.pytest.ini_options]
testpaths = "tests"
xfail_strict = true
filterwarnings = [
    "error"
]


[tool.coverage.run]
source = ["src/pydantic_to_pyarrow"]
branch = true

[tool.coverage.report]
precision = 2
show_missing = true
exclude_lines = [
    'pragma: no cover',
    'raise NotImplementedError',
    'if TYPE_CHECKING:',
    '@overload',
]
fail_under = 100
